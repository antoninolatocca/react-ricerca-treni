{"ast":null,"code":"import Utility from \"../Utility\";\nimport App from \"../App\";\n\nclass ControllerRicerca {\n  constructor() {\n    const _today = new Date();\n\n    const _h = _today.getHours();\n\n    this._partenza = \"Milano Centrale\";\n    this._arrivo = \"Roma Termini\";\n    this._orario = _h;\n    this._convoglio = \"Frecciarossa 1000\";\n    this._faster = {\n      treno: \"\",\n      durata: 0\n    };\n  }\n\n  handleSelectPartenzaChange(value) {\n    this._partenza = value;\n    App.singleton.setState({\n      treni: Utility.ricercaTreni(value, this._arrivo, this._orario, this._convoglio)\n    });\n  }\n\n  handleSelectArrivoChange(value) {\n    this._arrivo = value;\n    App.singleton.setState({\n      treni: Utility.ricercaTreni(this._partenza, value, this._orario, this._convoglio)\n    });\n  }\n\n  handleSelectOraInizioChange(value) {\n    this._oraInizio = value;\n    App.singleton.setState({\n      treni: Utility.ricercaTreni(this._partenza, this._arrivo, value, this._convoglio)\n    });\n  }\n\n  handleSelectConvoglioChange(value) {\n    this._convoglio = value;\n    App.singleton.setState({\n      treni: Utility.ricercaTreni(this._partenza, this._arrivo, this._orario, value)\n    });\n  }\n\n  getDatiRigaTreno(treno) {\n    const _posPartenza = Utility.getPosFermata(treno, this._partenza);\n\n    const _posArrivo = Utility.getPosFermata(treno, this._arrivo);\n\n    let result = {\n      \"stazione_partenza\": treno.fermate[0].stazione,\n      \"stazione_arrivo\": treno.fermate[treno.fermate.length - 1].stazione,\n      \"orario_partenza\": treno.fermate[0].orario,\n      \"orario_arrivo\": treno.fermate[treno.fermate.length - 1].orario\n    };\n\n    if (_posPartenza && _posPartenza >= 0) {\n      result.stazione_partenza = treno.fermate[_posPartenza].stazione;\n      result.orario_partenza = treno.fermate[_posPartenza].orario;\n    }\n\n    if (_posArrivo && _posArrivo >= 0) {\n      result.stazione_arrivo = treno.fermate[_posArrivo].stazione;\n      result.orario_arrivo = treno.fermate[_posArrivo].orario;\n    }\n\n    let durataObj = Utility.getHourDiff(result.orario_partenza, result.orario_arrivo);\n\n    if (this._faster.durata < durataObj.minuti_totali) {\n      this._faster.treno = treno.treno;\n      this._faster.durata = durataObj.minuti_totali;\n    }\n\n    result.durata = Utility.displayDurata(durataObj);\n    return result;\n  }\n\n  getFermateTreno(treno) {\n    const _posPartenza = Utility.getPosFermata(treno, this._partenza);\n\n    const _posArrivo = Utility.getPosFermata(treno, this._arrivo);\n\n    let fermate = [];\n\n    for (let i = _posPartenza; i <= _posArrivo; i++) {\n      fermate.push(treno.fermate[i].stazione);\n    }\n\n    return fermate;\n  }\n\n}\n\nexport default ControllerRicerca;","map":{"version":3,"sources":["/Users/antoninolatocca/Developer/React/react-ricerca-treni/src/controllo/ControllerRicerca.js"],"names":["Utility","App","ControllerRicerca","constructor","_today","Date","_h","getHours","_partenza","_arrivo","_orario","_convoglio","_faster","treno","durata","handleSelectPartenzaChange","value","singleton","setState","treni","ricercaTreni","handleSelectArrivoChange","handleSelectOraInizioChange","_oraInizio","handleSelectConvoglioChange","getDatiRigaTreno","_posPartenza","getPosFermata","_posArrivo","result","fermate","stazione","length","orario","stazione_partenza","orario_partenza","stazione_arrivo","orario_arrivo","durataObj","getHourDiff","minuti_totali","displayDurata","getFermateTreno","i","push"],"mappings":"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","sourcesContent":["import Utility from \"../Utility\";\nimport App from \"../App\";\n\nclass ControllerRicerca {\n\n    constructor() {\n        const _today = new Date();\n        const _h = _today.getHours();\n\n        this._partenza = \"Milano Centrale\";\n        this._arrivo = \"Roma Termini\";\n        this._orario = _h;\n        this._convoglio = \"Frecciarossa 1000\";\n\n        this._faster = {\n            treno: \"\",\n            durata: 0\n        };\n    }\n\n    handleSelectPartenzaChange(value) {\n        this._partenza = value;\n        App.singleton.setState({treni:Utility.ricercaTreni(value, this._arrivo, this._orario, this._convoglio)});\n    }\n\n    handleSelectArrivoChange(value) {\n        this._arrivo = value;\n        App.singleton.setState({treni:Utility.ricercaTreni(this._partenza, value, this._orario, this._convoglio)})\n    }\n\n    handleSelectOraInizioChange(value) {\n        this._oraInizio = value;\n        App.singleton.setState({treni:Utility.ricercaTreni(this._partenza, this._arrivo, value, this._convoglio)});\n    }\n\n    handleSelectConvoglioChange(value) {\n        this._convoglio = value;\n        App.singleton.setState({treni:Utility.ricercaTreni(this._partenza, this._arrivo, this._orario, value)})\n    }\n\n    getDatiRigaTreno(treno) {\n        const _posPartenza = Utility.getPosFermata(treno, this._partenza);\n        const _posArrivo = Utility.getPosFermata(treno, this._arrivo);\n\n        let result = {\n            \"stazione_partenza\": treno.fermate[0].stazione,\n            \"stazione_arrivo\": treno.fermate[treno.fermate.length -1].stazione,\n            \"orario_partenza\": treno.fermate[0].orario,\n            \"orario_arrivo\": treno.fermate[treno.fermate.length -1].orario\n        };\n    \n        if(_posPartenza && _posPartenza >= 0) {\n          result.stazione_partenza = treno.fermate[_posPartenza].stazione;\n          result.orario_partenza = treno.fermate[_posPartenza].orario;\n        }\n        if(_posArrivo && _posArrivo >= 0) {\n          result.stazione_arrivo = treno.fermate[_posArrivo].stazione;\n          result.orario_arrivo = treno.fermate[_posArrivo].orario;\n        }\n\n        let durataObj = Utility.getHourDiff(result.orario_partenza, result.orario_arrivo);\n        if(this._faster.durata < durataObj.minuti_totali) {\n            this._faster.treno = treno.treno;\n            this._faster.durata = durataObj.minuti_totali;\n        }\n        result.durata = Utility.displayDurata(durataObj);\n\n        return result;\n    }\n\n    getFermateTreno(treno) {\n        const _posPartenza = Utility.getPosFermata(treno, this._partenza);\n        const _posArrivo = Utility.getPosFermata(treno, this._arrivo);\n\n        let fermate = [];\n        for(let i = _posPartenza; i <= _posArrivo; i++) {\n            fermate.push(treno.fermate[i].stazione);\n        }\n        return fermate;\n\n    }\n\n}\n\nexport default ControllerRicerca;"]},"metadata":{},"sourceType":"module"}