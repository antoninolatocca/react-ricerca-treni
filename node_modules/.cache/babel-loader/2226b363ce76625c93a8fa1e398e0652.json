{"ast":null,"code":"import Costanti from './Costanti';\n\nconst DATABASE = require('./data.json');\n\nArray.prototype.findFermateByName = function (stazione) {\n  let pos = -1;\n  this.forEach((fermata, position) => {\n    if (fermata.stazione == stazione) {\n      pos = position;\n      return pos;\n    }\n  });\n  return pos;\n};\n\nclass Utility {\n  static get treni() {\n    return DATABASE;\n  }\n\n  static getHourDiff(pStartHour, pEndHour) {\n    let start_array = [0, 0];\n    let end_array = [0, 0];\n    start_array = pStartHour.split(\":\");\n    end_array = pEndHour.split(\":\");\n    start_array = [parseInt(start_array[0]), parseInt(start_array[1])];\n    end_array = [parseInt(end_array[0]), parseInt(end_array[1])];\n    let start_minutes = start_array[0] * 60 + start_array[1];\n    let end_minutes = end_array[0] * 60 + end_array[1];\n    let diff_minutes = 0;\n    let next_day = false;\n\n    if (start_array[0] <= end_array[0]) {\n      diff_minutes = end_minutes - start_minutes;\n    } else {\n      next_day = true;\n      let yesterday = (23 - start_array[0]) * 60 + (60 - start_array[1]);\n      diff_minutes = yesterday + end_minutes;\n    }\n\n    let res_h = Math.floor(diff_minutes / 60);\n    let res_m = diff_minutes - res_h * 60;\n    return {\n      h: res_h,\n      min: res_m,\n      minuti_totali: diff_minutes,\n      giorno_successivo: next_day\n    };\n  }\n\n  static isAfter(fermata, ricerca) {\n    if (parseInt(fermata[0]) > parseInt(ricerca[0])) return true;\n    if (parseInt(fermata[0]) < parseInt(ricerca[0])) return false;\n\n    if (parseInt(fermata[0]) === parseInt(ricerca[0])) {\n      if (ricerca[1]) {\n        return parseInt(fermata[1]) >= parseInt(ricerca[1]) ? true : false;\n      } else return true;\n    }\n  }\n\n  static displayDigit(n) {\n    return n < 10 ? '0' + n : n;\n  }\n\n  static displayDurata(valori) {\n    let res = this.displayDigit(valori.h) + \"h \";\n    res += this.displayDigit(valori.min) + \"min\";\n    return res;\n  }\n\n  static getListaStazioni() {\n    let stazioni = new Set();\n    DATABASE.treni.forEach(tratta => {\n      tratta.fermate.forEach(fermata => {\n        stazioni.add(fermata.stazione);\n      });\n    });\n    stazioni = [...stazioni].sort();\n    return stazioni;\n  }\n\n  static getListaRotabili() {\n    let rotabili = new Set();\n    DATABASE.treni.forEach(treno => {\n      rotabili.add(treno.convoglio);\n    });\n    rotabili = [...rotabili].sort();\n    return rotabili;\n  }\n\n  static getClassiDiServizio(treno) {\n    let classi = [];\n    console.log('Treno passato');\n\n    for (let i = 0; i < DATABASE.classi.length; i++) {\n      if (DATABASE.classi[i].treno === treno) {\n        classi = DATABASE.classi[i].servizi;\n        return classi;\n      }\n    }\n\n    return classi;\n  }\n\n  static ricercaTreni(partenza, arrivo, orario, convoglio, orderBy) {\n    let _soluzioni = [];\n    DATABASE.treni.forEach(treno => {\n      treno.fermate.forEach(fermata => {\n        if (fermata.stazione == partenza && fermata != treno.fermate[treno.fermate.length - 1]) {\n          _soluzioni.push(treno);\n        }\n      });\n    });\n\n    if (arrivo != \"\" && _soluzioni.length > 0) {\n      let sol_arrivo = [];\n\n      _soluzioni.forEach(treno => {\n        const posPartenza = treno.fermate.findFermateByName(partenza);\n        const posArrivo = treno.fermate.findFermateByName(arrivo);\n        let esito;\n\n        if (orario) {\n          const h_feramta = treno.fermate[posPartenza].orario.split(':');\n          let h_ricerca = [];\n\n          if (typeof orario === 'string') {\n            h_ricerca = orario.split(\":\");\n          } else if (typeof orario === 'number') {\n            h_ricerca.push(orario.toString(10));\n          }\n\n          esito = this.isAfter(h_feramta, h_ricerca);\n        } else esito = true;\n\n        if (posPartenza < posArrivo) {\n          if (esito) sol_arrivo.push(treno);\n        }\n      });\n\n      _soluzioni = sol_arrivo;\n    }\n\n    if (convoglio != Costanti.ALL && _soluzioni.length > 0) {\n      let sol_convoglio = [];\n\n      _soluzioni.forEach(treno => {\n        if (treno.convoglio == convoglio) sol_convoglio.push(treno);\n      });\n\n      _soluzioni = sol_convoglio;\n    }\n\n    _soluzioni.sort((a, b) => {\n      let a1, b1;\n\n      switch (orderBy) {\n        case Costanti.PARTENZA:\n          a1 = a.fermate[a.fermate.findFermateByName(partenza)].orario.split(\":\");\n          b1 = b.fermate[b.fermate.findFermateByName(partenza)].orario.split(\":\");\n          return this.isAfter(a1, b1) ? 1 : -1;\n\n        case Costanti.ARRIVO:\n          a1 = a.fermate[a.fermate.findFermateByName(arrivo)].orario.split(\":\");\n          b1 = b.fermate[b.fermate.findFermateByName(arrivo)].orario.split(\":\");\n          return this.isAfter(a1, b1) ? 1 : -1;\n\n        case Costanti.DURATA:\n          let fast_obj = this.getFasterSolution([a, b], partenza, arrivo);\n          return fast_obj.treni.includes(b.treno) && !fast_obj.treni.includes(a.treno) ? 1 : -1;\n\n        default:\n          a1 = a.fermate[a.fermate.findFermateByName(partenza)].orario.split(\":\");\n          b1 = b.fermate[b.fermate.findFermateByName(partenza)].orario.split(\":\");\n          return this.isAfter(a1, b1) ? 1 : -1;\n      }\n    });\n\n    let faster = this.getFasterSolution(_soluzioni, partenza, arrivo);\n\n    for (let i = 0; i < _soluzioni.length; i++) {\n      if (faster.treni.includes(_soluzioni[i].treno)) {\n        _soluzioni[i].faster = true;\n      } else _soluzioni[i].faster = false;\n\n      _soluzioni[i].stops = _soluzioni[i].fermate.findFermateByName(arrivo) - _soluzioni[i].fermate.findFermateByName(partenza) - 1;\n    }\n\n    if (_soluzioni.length == 1) _soluzioni[0].faster = false;\n    return _soluzioni;\n  }\n\n  static getFasterSolution(soluzioni, partenza, arrivo) {\n    let faster = {\n      treni: [],\n      durata: 0\n    };\n\n    for (let i = 0; i < soluzioni.length; i++) {\n      let s = soluzioni[i];\n      let durataInMin = this.getHourDiff(s.fermate[s.fermate.findFermateByName(partenza)].orario, s.fermate[s.fermate.findFermateByName(arrivo)].orario).minuti_totali;\n\n      if (faster.treni.length == 0) {\n        faster.treni = [s.treno];\n        faster.durata = this.getHourDiff(s.fermate[s.fermate.findFermateByName(partenza)].orario, s.fermate[s.fermate.findFermateByName(arrivo)].orario).minuti_totali;\n      } else if (faster.treni.length > 0 && durataInMin == faster.durata) {\n        faster.treni.push(s.treno);\n      } else if (faster.treni.length > 0 && durataInMin < faster.durata) {\n        faster.treni = [s.treno];\n        faster.durata = durataInMin;\n      }\n    }\n\n    return faster;\n  }\n\n  static getPosFermata(treno, fermata) {\n    return treno.fermate.findFermateByName(fermata);\n  }\n\n  static getTrenoByNumber(numero) {\n    for (let i = 0; i < DATABASE.treni.length; i++) {\n      if (DATABASE.treni[i].treno === numero) return DATABASE.treni[i];\n    }\n\n    return false;\n  }\n\n}\n\nexport default Utility;","map":{"version":3,"sources":["/Users/antoninolatocca/Developer/React/react-ricerca-treni/src/Utility.js"],"names":["Costanti","DATABASE","require","Array","prototype","findFermateByName","stazione","pos","forEach","fermata","position","Utility","treni","getHourDiff","pStartHour","pEndHour","start_array","end_array","split","parseInt","start_minutes","end_minutes","diff_minutes","next_day","yesterday","res_h","Math","floor","res_m","h","min","minuti_totali","giorno_successivo","isAfter","ricerca","displayDigit","n","displayDurata","valori","res","getListaStazioni","stazioni","Set","tratta","fermate","add","sort","getListaRotabili","rotabili","treno","convoglio","getClassiDiServizio","classi","console","log","i","length","servizi","ricercaTreni","partenza","arrivo","orario","orderBy","_soluzioni","push","sol_arrivo","posPartenza","posArrivo","esito","h_feramta","h_ricerca","toString","ALL","sol_convoglio","a","b","a1","b1","PARTENZA","ARRIVO","DURATA","fast_obj","getFasterSolution","includes","faster","stops","soluzioni","durata","s","durataInMin","getPosFermata","getTrenoByNumber","numero"],"mappings":"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","sourcesContent":["import Costanti from './Costanti';\n\nconst DATABASE = require('./data.json');\n\nArray.prototype.findFermateByName = function(stazione){\n    let pos = -1;\n    this.forEach((fermata, position )=>{\n        if (fermata.stazione == stazione ){\n            pos = position;\n            return pos;\n        }\n    });\n    return pos;\n};\n\nclass Utility {\n\n    static get treni(){\n        return DATABASE;\n    }\n\n\n    static getHourDiff(pStartHour, pEndHour) {\n        let start_array = [0, 0];\n        let end_array = [0, 0];\n        start_array = pStartHour.split(\":\");\n        end_array = pEndHour.split(\":\");\n\n        start_array = [parseInt(start_array[0]), parseInt(start_array[1])];\n        end_array = [parseInt(end_array[0]), parseInt(end_array[1])];\n\n        let start_minutes = (start_array[0] * 60) + start_array[1];\n        let end_minutes = (end_array[0] * 60) + end_array[1];\n\n        let diff_minutes = 0;\n        let next_day = false;\n        if(start_array[0] <= end_array[0]) {\n            diff_minutes = end_minutes - start_minutes;\n        } else {\n            next_day = true;\n            let yesterday = ((23 - start_array[0]) * 60) + (60 - start_array[1]);\n            diff_minutes = yesterday + end_minutes;\n        }\n\n        let res_h = Math.floor(diff_minutes / 60);\n        let res_m = diff_minutes - (res_h * 60);\n\n        return {\n            h: res_h,\n            min: res_m,\n            minuti_totali: diff_minutes,\n            giorno_successivo: next_day\n        };\n    }\n\n    static isAfter(fermata, ricerca) {\n        if(parseInt(fermata[0]) > parseInt(ricerca[0])) return true;\n        if(parseInt(fermata[0]) < parseInt(ricerca[0])) return false;\n        if(parseInt(fermata[0]) === parseInt(ricerca[0])) {\n            if(ricerca[1]) {\n                return (parseInt(fermata[1]) >= parseInt(ricerca[1])) ? true : false;\n            } else return true;\n        }\n    }\n\n    static displayDigit(n) {\n        return (n < 10) ? '0' + n : n;\n    }\n\n    static displayDurata(valori) {\n        let res = this.displayDigit(valori.h) + \"h \";\n        res += this.displayDigit(valori.min) + \"min\";\n        return res;\n    }\n\n    static getListaStazioni() {\n        let stazioni = new Set();\n        DATABASE.treni.forEach(tratta => {\n            tratta.fermate.forEach(fermata => {\n                stazioni.add(fermata.stazione);\n            })\n        });\n        stazioni = [...stazioni].sort();\n        return stazioni;\n    }\n\n    static getListaRotabili() {\n        let rotabili = new Set();\n        DATABASE.treni.forEach(treno => {\n            rotabili.add(treno.convoglio);\n        });\n        rotabili = [...rotabili].sort();\n        return rotabili;\n    }\n\n    static getClassiDiServizio(treno) {\n        let classi = [];\n        console.log('Treno passato')\n        for(let i = 0; i < DATABASE.classi.length; i++) {\n            if(DATABASE.classi[i].treno === treno) {\n                classi = DATABASE.classi[i].servizi;\n                return classi;\n            }\n        }\n        return classi;\n    }\n\n    static ricercaTreni(partenza, arrivo, orario, convoglio, orderBy) {\n        let _soluzioni = [];\n        DATABASE.treni.forEach(treno => {\n            treno.fermate.forEach(fermata => {\n                if (fermata.stazione == partenza && fermata != treno.fermate[treno.fermate.length - 1]) {\n                    _soluzioni.push(treno);\n                }\n            });\n        });\n        if (arrivo != \"\" && _soluzioni.length > 0){\n            let sol_arrivo = [];\n            _soluzioni.forEach((treno)=> {\n                const posPartenza = treno.fermate.findFermateByName(partenza);\n                const posArrivo  = treno.fermate.findFermateByName(arrivo);\n\n                let esito;\n                if(orario) {\n                    const h_feramta = treno.fermate[posPartenza].orario.split(':');\n                    let h_ricerca = [];\n                    if(typeof orario === 'string') {\n                        h_ricerca = orario.split(\":\");\n                    } else if(typeof orario === 'number') {\n                        h_ricerca.push(orario.toString(10));\n                    }\n                    esito = this.isAfter(h_feramta, h_ricerca);\n                } else esito = true;\n                \n                if (posPartenza < posArrivo){\n                    if(esito) sol_arrivo.push(treno);\n                }\n            });\n            _soluzioni = sol_arrivo;\n        }\n        if(convoglio != Costanti.ALL && _soluzioni.length > 0){\n            let sol_convoglio = [];\n            _soluzioni.forEach(treno => {\n                if(treno.convoglio == convoglio) sol_convoglio.push(treno);\n            })\n            _soluzioni = sol_convoglio;\n        }\n        _soluzioni.sort((a, b) => {\n            let a1, b1;\n            switch(orderBy) {\n                case Costanti.PARTENZA:\n                    a1 = a.fermate[a.fermate.findFermateByName(partenza)].orario.split(\":\");\n                    b1 = b.fermate[b.fermate.findFermateByName(partenza)].orario.split(\":\");\n                    return this.isAfter(a1, b1) ? 1 : -1;\n                case Costanti.ARRIVO:\n                    a1 = a.fermate[a.fermate.findFermateByName(arrivo)].orario.split(\":\");\n                    b1 = b.fermate[b.fermate.findFermateByName(arrivo)].orario.split(\":\");\n                    return this.isAfter(a1, b1) ? 1 : -1;\n                case Costanti.DURATA:\n                    let fast_obj = this.getFasterSolution([a, b], partenza, arrivo);\n                    return (fast_obj.treni.includes(b.treno) && !fast_obj.treni.includes(a.treno)) ? 1 : -1;\n                default:\n                    a1 = a.fermate[a.fermate.findFermateByName(partenza)].orario.split(\":\");\n                    b1 = b.fermate[b.fermate.findFermateByName(partenza)].orario.split(\":\");\n                    return this.isAfter(a1, b1) ? 1 : -1;\n            }\n\n            \n        })\n\n        let faster = this.getFasterSolution(_soluzioni, partenza, arrivo);\n        for(let i = 0; i < _soluzioni.length; i++) {\n            if(faster.treni.includes(_soluzioni[i].treno)) {\n                _soluzioni[i].faster = true;\n            } else _soluzioni[i].faster = false;\n            \n            _soluzioni[i].stops = _soluzioni[i].fermate.findFermateByName(arrivo) - _soluzioni[i].fermate.findFermateByName(partenza) -1;\n        }\n        if(_soluzioni.length == 1) _soluzioni[0].faster = false;\n        \n        return _soluzioni;\n    }\n\n    static getFasterSolution(soluzioni, partenza, arrivo) {\n        let faster = {treni: [], durata: 0};\n        for(let i = 0; i < soluzioni.length; i++) {\n            let s = soluzioni[i];\n            let durataInMin = this.getHourDiff(s.fermate[s.fermate.findFermateByName(partenza)].orario, s.fermate[s.fermate.findFermateByName(arrivo)].orario).minuti_totali;\n            if(faster.treni.length == 0) {\n                faster.treni = [s.treno];\n                faster.durata = this.getHourDiff(s.fermate[s.fermate.findFermateByName(partenza)].orario, s.fermate[s.fermate.findFermateByName(arrivo)].orario).minuti_totali;\n            } else if(faster.treni.length > 0 && durataInMin == faster.durata) {\n                faster.treni.push(s.treno);\n            } else if(faster.treni.length > 0 && durataInMin < faster.durata) {\n                faster.treni = [s.treno];\n                faster.durata = durataInMin;\n            }\n        }\n        return faster;\n    }\n\n    static getPosFermata(treno, fermata) {\n        return treno.fermate.findFermateByName(fermata);\n    }\n\n    static getTrenoByNumber(numero) {\n        for (let i = 0; i < DATABASE.treni.length; i++) {\n            if(DATABASE.treni[i].treno === numero) return DATABASE.treni[i];\n        }\n        return false;\n    }\n\n}\n\nexport default Utility;"]},"metadata":{},"sourceType":"module"}