{"ast":null,"code":"const FRECCE = require('./data.json');\n\nArray.prototype.findFermateByName = function (stazione) {\n  let pos = -1;\n  this.forEach((fermata, position) => {\n    if (fermata.stazione == stazione) {\n      pos = position;\n      return pos;\n    }\n  });\n  return pos;\n};\n\nclass Utility {\n  static get treni() {\n    return FRECCE;\n  }\n\n  static getHourDiff(pStartHour, pEndHour) {\n    let res = '';\n    let aTmp = ''; // Trasformo l'orario di inizio in minuti\n\n    aTmp = pStartHour.split(':');\n    let nStartMin = Number(aTmp[0]) * 60 + Number(aTmp[1]); // Trasformo l'orario di fine in minuti\n\n    aTmp = pEndHour.split(':');\n    let nEndMin = Number(aTmp[0]) * 60 + Number(aTmp[1]); // Calcolo la differenza\n\n    let nDiff = 0;\n    nDiff = nStartMin > nEndMin ? nStartMin - nEndMin : nEndMin - nStartMin; // Formatto la stringa di uscita\n\n    let nDiffMin = 0;\n    let nDiffHour = 0;\n\n    if (nDiff > 59) {\n      nDiffMin = nDiff % 60;\n      nDiffHour = (nDiff - nDiffMin) / 60;\n    } else {\n      nDiffMin = nDiff;\n    }\n\n    res += this.displayDigit(nDiffHour);\n    res += 'h ';\n    res += this.displayDigit(nDiffMin);\n    res += 'm';\n    return res;\n  }\n\n  static displayDigit(n) {\n    return n < 10 ? '0' + n : n;\n  }\n\n  static getListaStazioni() {\n    let stazioni = new Set();\n    FRECCE.treni.forEach(tratta => {\n      tratta.fermate.forEach(fermata => {\n        stazioni.add(fermata.stazione);\n      });\n    });\n    return stazioni;\n  }\n\n  static ricercaTreni(partenza, arrivo) {\n    let _soluzioni = [];\n    FRECCE.treni.forEach(treno => {\n      treno.fermate.forEach(fermata => {\n        if (fermata.stazione == partenza && fermata != treno.fermate[treno.fermate.length - 1]) {\n          _soluzioni.push(treno);\n        }\n      });\n    });\n\n    if (arrivo != \"\" && _soluzioni.length > 0) {\n      let solution = [];\n\n      _soluzioni.forEach((treno, position) => {\n        let posPartenza = treno.fermate.findFermateByName(partenza);\n        let posArrivo = treno.fermate.findFermateByName(arrivo);\n\n        if (posPartenza < posArrivo) {\n          solution.push(treno);\n        }\n      });\n\n      return solution;\n    }\n\n    console.log(_soluzioni.length + ' Soluzioni da ' + partenza + ' a ' + arrivo);\n    console.log('Restituisco le soluzioni: ');\n    console.log(_soluzioni);\n    return _soluzioni;\n  }\n\n  static getPosFermata(treno, fermata) {\n    console.log('Ho il treno e la fermata');\n    console.log(treno);\n    console.log(fermata);\n    let pos = treno.fermate.findFermateByName(fermata);\n    return pos ? pos : false;\n  }\n\n}\n\nexport default Utility;","map":{"version":3,"sources":["/Users/antoninolatocca/Developer/React/react-ricerca-treni/src/Utility.js"],"names":["FRECCE","require","Array","prototype","findFermateByName","stazione","pos","forEach","fermata","position","Utility","treni","getHourDiff","pStartHour","pEndHour","res","aTmp","split","nStartMin","Number","nEndMin","nDiff","nDiffMin","nDiffHour","displayDigit","n","getListaStazioni","stazioni","Set","tratta","fermate","add","ricercaTreni","partenza","arrivo","_soluzioni","treno","length","push","solution","posPartenza","posArrivo","console","log","getPosFermata"],"mappings":"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","sourcesContent":["const FRECCE = require('./data.json');\n\nArray.prototype.findFermateByName = function(stazione){\n    let pos = -1;\n    this.forEach((fermata, position )=>{\n        if (fermata.stazione == stazione ){\n            pos = position;\n            return pos;\n        }\n    });\n    return pos;\n};\n\nclass Utility {\n\n    static get treni(){\n        return FRECCE;\n    }\n\n\n    static getHourDiff(pStartHour, pEndHour) {\n        let res = '';\n        let aTmp = '';\n        // Trasformo l'orario di inizio in minuti\n        aTmp = pStartHour.split(':');\n        let nStartMin = Number(aTmp[0]) * 60 + Number(aTmp[1]);\n        // Trasformo l'orario di fine in minuti\n        aTmp = pEndHour.split(':');\n        let nEndMin = Number(aTmp[0]) * 60 + Number(aTmp[1]);\n        // Calcolo la differenza\n        let nDiff = 0;\n        nDiff = (nStartMin > nEndMin) ? (nStartMin - nEndMin) : (nEndMin - nStartMin);\n        // Formatto la stringa di uscita\n        let nDiffMin = 0;\n        let nDiffHour = 0;\n        if (nDiff > 59) {\n            nDiffMin = nDiff % 60;\n            nDiffHour = (nDiff - nDiffMin) / 60;\n        } else {\n            nDiffMin = nDiff;\n        }\n        res += this.displayDigit(nDiffHour);\n        res += 'h ';\n        res += this.displayDigit(nDiffMin);\n        res += 'm';\n        return res;\n    }\n\n    static displayDigit(n) {\n        return (n < 10) ? '0' + n : n;\n    }\n\n    static getListaStazioni() {\n        let stazioni = new Set();\n        FRECCE.treni.forEach(tratta => {\n            tratta.fermate.forEach(fermata => {\n                stazioni.add(fermata.stazione);\n            })\n        });\n        return stazioni;\n    }\n\n    static ricercaTreni(partenza, arrivo) {\n        let _soluzioni = [];\n        FRECCE.treni.forEach(treno => {\n            treno.fermate.forEach(fermata => {\n                if (fermata.stazione == partenza && fermata != treno.fermate[treno.fermate.length - 1]) {\n                    _soluzioni.push(treno);\n                }\n            });\n        });\n        if (arrivo != \"\" && _soluzioni.length > 0){\n            let solution = [];\n            _soluzioni.forEach((treno, position)=> {\n                let posPartenza = treno.fermate.findFermateByName(partenza);\n                let posArrivo  = treno.fermate.findFermateByName(arrivo);\n                if (posPartenza < posArrivo){\n                    solution.push(treno);\n                }\n            });\n            return solution;\n        }\n        console.log(_soluzioni.length + ' Soluzioni da ' + partenza + ' a ' + arrivo);\n        console.log('Restituisco le soluzioni: ');\n        console.log(_soluzioni);\n        return _soluzioni;\n    }\n\n    static getPosFermata(treno, fermata) {\n        console.log('Ho il treno e la fermata');\n        console.log(treno);\n        console.log(fermata);\n        let pos = treno.fermate.findFermateByName(fermata)\n        return (pos) ? pos : false;\n    }\n\n}\n\nexport default Utility;"]},"metadata":{},"sourceType":"module"}