{"ast":null,"code":"const FRECCE = require('./data.json');\n\nArray.prototype.findFermateByName = function (stazione) {\n  let pos = -1;\n  this.forEach((fermata, position) => {\n    if (fermata.stazione == stazione) {\n      pos = position;\n      return pos;\n    }\n  });\n  return pos;\n};\n\nArray.prototype.sortByOrarioPartenza = function (stazione) {\n  let scambio = true;\n  const n = this.length - 2;\n\n  while (scambio) {\n    scambio = false;\n\n    for (let i = 0; i < n + 1; i++) {\n      if (this[i].fermate[(Utility.getPosFermata(this[i]), stazione)].orario < this[i + 1].fermate[(Utility.getPosFermata(this[i + 1]), stazione)].orario) {\n        console.log('Swipe');\n        scambio = true;\n      }\n\n      console.log('Ciclo');\n    }\n\n    n = n - 1;\n  }\n};\n\nclass Utility {\n  static get treni() {\n    return FRECCE;\n  }\n\n  static getHourDiff(pStartHour, pEndHour) {\n    let res = '';\n    let aTmp = ''; // Trasformo l'orario di inizio in minuti\n\n    aTmp = pStartHour.split(':');\n    let nStartMin = Number(aTmp[0]) * 60 + Number(aTmp[1]); // Trasformo l'orario di fine in minuti\n\n    aTmp = pEndHour.split(':');\n    let nEndMin = Number(aTmp[0]) * 60 + Number(aTmp[1]); // Calcolo la differenza\n\n    let nDiff = 0;\n    nDiff = nStartMin > nEndMin ? nStartMin - nEndMin : nEndMin - nStartMin; // Formatto la stringa di uscita\n\n    let nDiffMin = 0;\n    let nDiffHour = 0;\n\n    if (nDiff > 59) {\n      nDiffMin = nDiff % 60;\n      nDiffHour = (nDiff - nDiffMin) / 60;\n    } else {\n      nDiffMin = nDiff;\n    }\n\n    res += this.displayDigit(nDiffHour);\n    res += 'h ';\n    res += this.displayDigit(nDiffMin);\n    res += 'm';\n    return res;\n  }\n\n  static displayDigit(n) {\n    return n < 10 ? '0' + n : n;\n  }\n\n  static getListaStazioni() {\n    let stazioni = new Set();\n    FRECCE.treni.forEach(tratta => {\n      tratta.fermate.forEach(fermata => {\n        stazioni.add(fermata.stazione);\n      });\n    });\n    stazioni = [...stazioni].sort();\n    return stazioni;\n  }\n\n  static ricercaTreni(partenza, arrivo) {\n    let _soluzioni = [];\n    FRECCE.treni.forEach(treno => {\n      treno.fermate.forEach(fermata => {\n        if (fermata.stazione == partenza && fermata != treno.fermate[treno.fermate.length - 1]) {\n          _soluzioni.push(treno);\n        }\n      });\n    });\n\n    if (arrivo != \"\" && _soluzioni.length > 0) {\n      let solution = [];\n\n      _soluzioni.forEach((treno, position) => {\n        let posPartenza = treno.fermate.findFermateByName(partenza);\n        let posArrivo = treno.fermate.findFermateByName(arrivo);\n\n        if (posPartenza < posArrivo) {\n          solution.push(treno);\n        }\n      });\n\n      return solution;\n    }\n\n    _soluzioni = _soluzioni.sortByOrarioPartenza(partenza);\n    return _soluzioni;\n  }\n\n  static getPosFermata(treno, fermata) {\n    return treno.fermate.findFermateByName(fermata);\n  }\n\n}\n\nexport default Utility;","map":{"version":3,"sources":["/Users/antoninolatocca/Developer/React/react-ricerca-treni/src/Utility.js"],"names":["FRECCE","require","Array","prototype","findFermateByName","stazione","pos","forEach","fermata","position","sortByOrarioPartenza","scambio","n","length","i","fermate","Utility","getPosFermata","orario","console","log","treni","getHourDiff","pStartHour","pEndHour","res","aTmp","split","nStartMin","Number","nEndMin","nDiff","nDiffMin","nDiffHour","displayDigit","getListaStazioni","stazioni","Set","tratta","add","sort","ricercaTreni","partenza","arrivo","_soluzioni","treno","push","solution","posPartenza","posArrivo"],"mappings":"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","sourcesContent":["const FRECCE = require('./data.json');\n\nArray.prototype.findFermateByName = function(stazione){\n    let pos = -1;\n    this.forEach((fermata, position )=>{\n        if (fermata.stazione == stazione ){\n            pos = position;\n            return pos;\n        }\n    });\n    return pos;\n};\n\nArray.prototype.sortByOrarioPartenza = function (stazione) {\n    let scambio = true;\n    const n = this.length -2;\n    while(scambio) {\n        scambio = false;\n        for(let i = 0; i < n + 1; i++) {\n            if(this[i].fermate[Utility.getPosFermata(this[i]), stazione].orario < this[i+1].fermate[Utility.getPosFermata(this[i+1]), stazione].orario) {\n                console.log('Swipe');\n                scambio = true;\n            }\n            console.log('Ciclo');\n        }\n        n = n-1;\n    }\n}\n\nclass Utility {\n\n    static get treni(){\n        return FRECCE;\n    }\n\n\n    static getHourDiff(pStartHour, pEndHour) {\n        let res = '';\n        let aTmp = '';\n        // Trasformo l'orario di inizio in minuti\n        aTmp = pStartHour.split(':');\n        let nStartMin = Number(aTmp[0]) * 60 + Number(aTmp[1]);\n        // Trasformo l'orario di fine in minuti\n        aTmp = pEndHour.split(':');\n        let nEndMin = Number(aTmp[0]) * 60 + Number(aTmp[1]);\n        // Calcolo la differenza\n        let nDiff = 0;\n        nDiff = (nStartMin > nEndMin) ? (nStartMin - nEndMin) : (nEndMin - nStartMin);\n        // Formatto la stringa di uscita\n        let nDiffMin = 0;\n        let nDiffHour = 0;\n        if (nDiff > 59) {\n            nDiffMin = nDiff % 60;\n            nDiffHour = (nDiff - nDiffMin) / 60;\n        } else {\n            nDiffMin = nDiff;\n        }\n        res += this.displayDigit(nDiffHour);\n        res += 'h ';\n        res += this.displayDigit(nDiffMin);\n        res += 'm';\n        return res;\n    }\n\n    static displayDigit(n) {\n        return (n < 10) ? '0' + n : n;\n    }\n\n    static getListaStazioni() {\n        let stazioni = new Set();\n        FRECCE.treni.forEach(tratta => {\n            tratta.fermate.forEach(fermata => {\n                stazioni.add(fermata.stazione);\n            })\n        });\n        stazioni = [...stazioni].sort();\n        return stazioni;\n    }\n\n    static ricercaTreni(partenza, arrivo) {\n        let _soluzioni = [];\n        FRECCE.treni.forEach(treno => {\n            treno.fermate.forEach(fermata => {\n                if (fermata.stazione == partenza && fermata != treno.fermate[treno.fermate.length - 1]) {\n                    _soluzioni.push(treno);\n                }\n            });\n        });\n        if (arrivo != \"\" && _soluzioni.length > 0){\n            let solution = [];\n            _soluzioni.forEach((treno, position)=> {\n                let posPartenza = treno.fermate.findFermateByName(partenza);\n                let posArrivo  = treno.fermate.findFermateByName(arrivo);\n                if (posPartenza < posArrivo){\n                    solution.push(treno);\n                }\n            });\n            return solution;\n        }\n        _soluzioni = _soluzioni.sortByOrarioPartenza(partenza);\n        return _soluzioni;\n    }\n\n    static getPosFermata(treno, fermata) {\n        return treno.fermate.findFermateByName(fermata);\n    }\n\n}\n\nexport default Utility;"]},"metadata":{},"sourceType":"module"}