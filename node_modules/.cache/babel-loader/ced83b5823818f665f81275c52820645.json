{"ast":null,"code":"const FRECCE = require('./data.json');\n\nArray.prototype.findFermateByName = function (stazione) {\n  let pos = -1;\n  this.forEach((fermata, position) => {\n    if (fermata.stazione == stazione) {\n      pos = position;\n      return pos;\n    }\n  });\n  return pos;\n};\n\nclass Utility {\n  static get treni() {\n    return FRECCE;\n  }\n\n  static getHourDiff(pStartHour, pEndHour) {\n    let res = '';\n    let aTmp = ''; // Trasformo l'orario di inizio in minuti\n\n    aTmp = pStartHour.split(':');\n    let nStartMin = Number(aTmp[0]) * 60 + Number(aTmp[1]); // Trasformo l'orario di fine in minuti\n\n    aTmp = pEndHour.split(':');\n    let nEndMin = Number(aTmp[0]) * 60 + Number(aTmp[1]); // Calcolo la differenza\n\n    let nDiff = 0;\n    nDiff = nStartMin > nEndMin ? nStartMin - nEndMin : nEndMin - nStartMin; // Formatto la stringa di uscita\n\n    let nDiffMin = 0;\n    let nDiffHour = 0;\n\n    if (nDiff > 59) {\n      nDiffMin = nDiff % 60;\n      nDiffHour = (nDiff - nDiffMin) / 60;\n    } else {\n      nDiffMin = nDiff;\n    }\n\n    res += this.displayDigit(nDiffHour);\n    res += 'h ';\n    res += this.displayDigit(nDiffMin);\n    res += 'm';\n    return res;\n  }\n\n  static isAfter(fermata, ricerca) {\n    if (parseInt(fermata[0]) > parseInt(ricerca[0])) return true;\n    if (parseInt(fermata[0]) < parseInt(ricerca[0])) return false;\n\n    if (parseInt(fermata[0]) === parseInt(ricerca[0])) {\n      if (ricerca[1]) {\n        return parseInt(fermata[1]) >= parseInt(ricerca[1]) ? true : false;\n      } else return true;\n    }\n  }\n\n  static displayDigit(n) {\n    return n < 10 ? '0' + n : n;\n  }\n\n  static getListaStazioni() {\n    let stazioni = new Set();\n    FRECCE.treni.forEach(tratta => {\n      tratta.fermate.forEach(fermata => {\n        stazioni.add(fermata.stazione);\n      });\n    });\n    stazioni = [...stazioni].sort();\n    return stazioni;\n  }\n\n  static getListaRotabili() {\n    let rotabili = new Set();\n    FRECCE.treni.forEach(treno => {\n      rotabili.add(treno.convoglio);\n    });\n    rotabili = [...rotabili].sort();\n    return rotabili;\n  }\n\n  static ricercaTreni(partenza, arrivo, orario, convoglio) {\n    let _soluzioni = [];\n    FRECCE.treni.forEach(treno => {\n      treno.fermate.forEach(fermata => {\n        if (fermata.stazione == partenza && fermata != treno.fermate[treno.fermate.length - 1]) {\n          _soluzioni.push(treno);\n        }\n      });\n    });\n\n    if (arrivo != \"\" && _soluzioni.length > 0) {\n      let sol_arrivo = [];\n\n      _soluzioni.forEach(treno => {\n        const posPartenza = treno.fermate.findFermateByName(partenza);\n        const posArrivo = treno.fermate.findFermateByName(arrivo);\n        let esito;\n\n        if (orario) {\n          const h_feramta = treno.fermate[posPartenza].orario.split(':');\n          let h_ricerca = [];\n\n          if (typeof orario === 'string') {\n            h_ricerca = orario.split(\":\");\n          } else if (typeof orario === 'number') {\n            h_ricerca.push(orario.toString(10));\n          }\n\n          esito = this.isAfter(h_feramta, h_ricerca);\n        } else esito = true;\n\n        if (posPartenza < posArrivo) {\n          if (esito) sol_arrivo.push(treno);\n        }\n      });\n\n      _soluzioni = sol_arrivo;\n    }\n\n    if (convoglio != \"\" && _soluzioni.length > 0) {\n      let sol_convoglio = [];\n\n      _soluzioni.forEach(treno => {\n        if (treno.convoglio == convoglio) sol_convoglio.push(treno);\n      });\n\n      _soluzioni = sol_convoglio;\n    }\n\n    this.sortSoluzioni(_soluzioni, partenza);\n    return _soluzioni;\n  }\n\n  static sortSoluzioni(soluzioni, partenza) {\n    let _res = [soluzioni[0]];\n    console.log('Ho salvato la prima risposta');\n    console.log(_res);\n\n    for (let i = 1; i < soluzioni.length; i++) {\n      let _hSoluzione = soluzioni[i].fermate[soluzioni[i].fermate.findFermateByName(partenza)].orario.split(\":\");\n\n      console.log('Controllo la solzuione ' + i);\n\n      if (_res.length === 1) {\n        let savedSol = _res[0].fermate[soluzioni[0].fermate.findFermateByName(partenza)].orario.split(\":\");\n\n        let unsavedSol = soluzioni[i].fermate[soluzioni[i].fermate.findFermateByName(partenza)].orario.split(\":\");\n        this.isAfter(savedSol, unsavedSol) ? _res.unshift(soluzioni[i]) : _res.push(soluzioni[i]);\n        console.log('Ho sicuramente inserito la seconda risposta');\n        console.log(_res);\n      } else {\n        console.log('Ci sono piÃ¹ di un elemento nella risposta');\n\n        for (let k = 0; k < _res.length - 1; k++) {\n          console.log(\"Ciclo l'array delle risposte [\" + k + \" di \" + _res.length + \"]\");\n          console.log(_res[k]);\n          console.log(_res[k + 1]);\n\n          let _hResK1 = _res[k].fermate[_res[k].fermate.findFermateByName(partenza)].orario.split(\":\");\n\n          let _hResK2 = _res[k + 1].fermate[_res[k + 1].fermate.findFermateByName(partenza)].orario.split(\":\");\n\n          console.log(_hResK1);\n          console.log(_hResK2);\n\n          if (this.isAfter(_hResK1, _hSoluzione) && !this.isAfter(_hResK2, _hSoluzione)) {\n            console.log('Si trova in mezzo');\n            _res[k + 1] = _soluzioni[i];\n            console.log(_res);\n          }\n        }\n      }\n\n      console.log(\"---------------------------\");\n    }\n\n    console.log(_res);\n  }\n\n  static getPosFermata(treno, fermata) {\n    return treno.fermate.findFermateByName(fermata);\n  }\n\n  static getTrenoByNumber(numero) {\n    for (let i = 0; i < FRECCE.treni.length; i++) {\n      if (FRECCE.treni[i].treno === numero) return FRECCE.treni[i];\n    }\n\n    return false;\n  }\n\n}\n\nexport default Utility;","map":{"version":3,"sources":["/Users/antoninolatocca/Developer/React/react-ricerca-treni/src/Utility.js"],"names":["FRECCE","require","Array","prototype","findFermateByName","stazione","pos","forEach","fermata","position","Utility","treni","getHourDiff","pStartHour","pEndHour","res","aTmp","split","nStartMin","Number","nEndMin","nDiff","nDiffMin","nDiffHour","displayDigit","isAfter","ricerca","parseInt","n","getListaStazioni","stazioni","Set","tratta","fermate","add","sort","getListaRotabili","rotabili","treno","convoglio","ricercaTreni","partenza","arrivo","orario","_soluzioni","length","push","sol_arrivo","posPartenza","posArrivo","esito","h_feramta","h_ricerca","toString","sol_convoglio","sortSoluzioni","soluzioni","_res","console","log","i","_hSoluzione","savedSol","unsavedSol","unshift","k","_hResK1","_hResK2","getPosFermata","getTrenoByNumber","numero"],"mappings":"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","sourcesContent":["const FRECCE = require('./data.json');\n\nArray.prototype.findFermateByName = function(stazione){\n    let pos = -1;\n    this.forEach((fermata, position )=>{\n        if (fermata.stazione == stazione ){\n            pos = position;\n            return pos;\n        }\n    });\n    return pos;\n};\n\nclass Utility {\n\n    static get treni(){\n        return FRECCE;\n    }\n\n\n    static getHourDiff(pStartHour, pEndHour) {\n        let res = '';\n        let aTmp = '';\n        // Trasformo l'orario di inizio in minuti\n        aTmp = pStartHour.split(':');\n        let nStartMin = Number(aTmp[0]) * 60 + Number(aTmp[1]);\n        // Trasformo l'orario di fine in minuti\n        aTmp = pEndHour.split(':');\n        let nEndMin = Number(aTmp[0]) * 60 + Number(aTmp[1]);\n        // Calcolo la differenza\n        let nDiff = 0;\n        nDiff = (nStartMin > nEndMin) ? (nStartMin - nEndMin) : (nEndMin - nStartMin);\n        // Formatto la stringa di uscita\n        let nDiffMin = 0;\n        let nDiffHour = 0;\n        if (nDiff > 59) {\n            nDiffMin = nDiff % 60;\n            nDiffHour = (nDiff - nDiffMin) / 60;\n        } else {\n            nDiffMin = nDiff;\n        }\n        res += this.displayDigit(nDiffHour);\n        res += 'h ';\n        res += this.displayDigit(nDiffMin);\n        res += 'm';\n        return res;\n    }\n\n    static isAfter(fermata, ricerca) {\n        if(parseInt(fermata[0]) > parseInt(ricerca[0])) return true;\n        if(parseInt(fermata[0]) < parseInt(ricerca[0])) return false;\n        if(parseInt(fermata[0]) === parseInt(ricerca[0])) {\n            if(ricerca[1]) {\n                return (parseInt(fermata[1]) >= parseInt(ricerca[1])) ? true : false;\n            } else return true;\n        }\n    }\n\n    static displayDigit(n) {\n        return (n < 10) ? '0' + n : n;\n    }\n\n    static getListaStazioni() {\n        let stazioni = new Set();\n        FRECCE.treni.forEach(tratta => {\n            tratta.fermate.forEach(fermata => {\n                stazioni.add(fermata.stazione);\n            })\n        });\n        stazioni = [...stazioni].sort();\n        return stazioni;\n    }\n\n    static getListaRotabili() {\n        let rotabili = new Set();\n        FRECCE.treni.forEach(treno => {\n            rotabili.add(treno.convoglio);\n        });\n        rotabili = [...rotabili].sort();\n        return rotabili;\n    }\n\n    static ricercaTreni(partenza, arrivo, orario, convoglio) {\n        let _soluzioni = [];\n        FRECCE.treni.forEach(treno => {\n            treno.fermate.forEach(fermata => {\n                if (fermata.stazione == partenza && fermata != treno.fermate[treno.fermate.length - 1]) {\n                    _soluzioni.push(treno);\n                }\n            });\n        });\n        if (arrivo != \"\" && _soluzioni.length > 0){\n            let sol_arrivo = [];\n            _soluzioni.forEach((treno)=> {\n                const posPartenza = treno.fermate.findFermateByName(partenza);\n                const posArrivo  = treno.fermate.findFermateByName(arrivo);\n\n                let esito;\n                if(orario) {\n                    const h_feramta = treno.fermate[posPartenza].orario.split(':');\n                    let h_ricerca = [];\n                    if(typeof orario === 'string') {\n                        h_ricerca = orario.split(\":\");\n                    } else if(typeof orario === 'number') {\n                        h_ricerca.push(orario.toString(10));\n                    }\n                    esito = this.isAfter(h_feramta, h_ricerca);\n                } else esito = true;\n                \n                if (posPartenza < posArrivo){\n                    if(esito) sol_arrivo.push(treno);\n                }\n            });\n            _soluzioni = sol_arrivo;\n        }\n        if(convoglio != \"\" && _soluzioni.length > 0){\n            let sol_convoglio = [];\n            _soluzioni.forEach(treno => {\n                if(treno.convoglio == convoglio) sol_convoglio.push(treno);\n            })\n            _soluzioni = sol_convoglio;\n        }\n        this.sortSoluzioni(_soluzioni, partenza);\n        return _soluzioni;\n    }\n\n    static sortSoluzioni(soluzioni, partenza) {\n        let _res = [soluzioni[0]];\n        console.log('Ho salvato la prima risposta');\n        console.log(_res);\n        for(let i = 1; i < soluzioni.length; i++) {\n            let _hSoluzione = soluzioni[i].fermate[soluzioni[i].fermate.findFermateByName(partenza)].orario.split(\":\");\n            console.log('Controllo la solzuione ' + i);\n            if(_res.length === 1) {\n                let savedSol = _res[0].fermate[soluzioni[0].fermate.findFermateByName(partenza)].orario.split(\":\");\n                let unsavedSol = soluzioni[i].fermate[soluzioni[i].fermate.findFermateByName(partenza)].orario.split(\":\");\n                (this.isAfter(savedSol, unsavedSol)) ? _res.unshift(soluzioni[i]) : _res.push(soluzioni[i]);\n                console.log('Ho sicuramente inserito la seconda risposta');\n                console.log(_res);\n            } else {\n                console.log('Ci sono piÃ¹ di un elemento nella risposta');\n                for(let k = 0; k < _res.length - 1; k++) {\n                    console.log(\"Ciclo l'array delle risposte [\" + k + \" di \" + _res.length + \"]\");\n                    console.log(_res[k]);\n                    console.log(_res[k+1]);\n                    let _hResK1 = _res[k].fermate[_res[k].fermate.findFermateByName(partenza)].orario.split(\":\");\n                    let _hResK2 = _res[k+1].fermate[_res[k+1].fermate.findFermateByName(partenza)].orario.split(\":\");\n                    console.log(_hResK1);\n                    console.log(_hResK2);\n                    if(this.isAfter(_hResK1, _hSoluzione) && !(this.isAfter(_hResK2, _hSoluzione))) {\n                        console.log('Si trova in mezzo');\n                        _res[k+1] = _soluzioni[i];\n                        console.log(_res);\n                    }\n                }\n\n            }\n            console.log(\"---------------------------\");\n        }\n        console.log(_res);\n    }\n\n    static getPosFermata(treno, fermata) {\n        return treno.fermate.findFermateByName(fermata);\n    }\n\n    static getTrenoByNumber(numero) {\n        for (let i = 0; i < FRECCE.treni.length; i++) {\n            if(FRECCE.treni[i].treno === numero) return FRECCE.treni[i];\n        }\n        return false;\n    }\n\n}\n\nexport default Utility;"]},"metadata":{},"sourceType":"module"}