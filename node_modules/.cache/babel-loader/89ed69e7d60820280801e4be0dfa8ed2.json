{"ast":null,"code":"const FRECCE = require('./data.json');\n\nArray.prototype.findFermateByName = function (stazione) {\n  let pos = -1;\n  this.forEach((fermata, position) => {\n    if (fermata.stazione == stazione) {\n      pos = position;\n      return pos;\n    }\n  });\n  return pos;\n};\n\nclass Utility {\n  static get treni() {\n    return FRECCE;\n  }\n\n  static getHourDiff(pStartHour, pEndHour) {\n    let res = '';\n    let aTmp = ''; // Trasformo l'orario di inizio in minuti\n\n    aTmp = pStartHour.split(':');\n    let nStartMin = Number(aTmp[0]) * 60 + Number(aTmp[1]); // Trasformo l'orario di fine in minuti\n\n    aTmp = pEndHour.split(':');\n    let nEndMin = Number(aTmp[0]) * 60 + Number(aTmp[1]); // Calcolo la differenza\n\n    let nDiff = 0;\n    nDiff = nStartMin > nEndMin ? nStartMin - nEndMin : nEndMin - nStartMin; // Formatto la stringa di uscita\n\n    let nDiffMin = 0;\n    let nDiffHour = 0;\n\n    if (nDiff > 59) {\n      nDiffMin = nDiff % 60;\n      nDiffHour = (nDiff - nDiffMin) / 60;\n    } else {\n      nDiffMin = nDiff;\n    }\n\n    res += this.displayDigit(nDiffHour);\n    res += 'h ';\n    res += this.displayDigit(nDiffMin);\n    res += 'm';\n    return res;\n  }\n\n  static isAfter(fermata, ricerca) {\n    if (fermata[0] > ricerca[0]) return true;\n    if (fermata[0] < ricerca[0]) return false;\n\n    if (fermata[0] === ricerca[0]) {\n      if (fermata[1] >= ricerca[1]) return true;\n      if (fermata[1] < ricerca[1]) return false;\n    }\n  }\n\n  static displayDigit(n) {\n    return n < 10 ? '0' + n : n;\n  }\n\n  static getListaStazioni() {\n    let stazioni = new Set();\n    FRECCE.treni.forEach(tratta => {\n      tratta.fermate.forEach(fermata => {\n        stazioni.add(fermata.stazione);\n      });\n    });\n    stazioni = [...stazioni].sort();\n    return stazioni;\n  }\n\n  static getListaRotabili() {\n    let rotabili = new Set();\n    FRECCE.treni.forEach(treno => {\n      rotabili.add(treno.convoglio);\n    });\n    rotabili = [...rotabili].sort();\n    return rotabili;\n  }\n\n  static ricercaTreni(partenza, arrivo, orario, convoglio) {\n    let _soluzioni = [];\n    FRECCE.treni.forEach(treno => {\n      treno.fermate.forEach(fermata => {\n        if (fermata.stazione == partenza && fermata != treno.fermate[treno.fermate.length - 1]) {\n          _soluzioni.push(treno);\n        }\n      });\n    });\n\n    if (arrivo != \"\" && _soluzioni.length > 0) {\n      let sol_arrivo = [];\n\n      _soluzioni.forEach(treno => {\n        const posPartenza = treno.fermate.findFermateByName(partenza);\n        const posArrivo = treno.fermate.findFermateByName(arrivo);\n        const h_feramta = treno.fermate[posPartenza].orario.split(':');\n        let h_ricerca;\n        console.log(typeof orario);\n\n        if (typeof num1 != 'number') {\n          h_ricerca = orario.split(\":\");\n        } else {\n          h_ricerca[0] = orario;\n          h_ricerca[1] = \"00\";\n        }\n\n        if (posPartenza < posArrivo && this.isAfter(h_feramta, h_ricerca)) {\n          sol_arrivo.push(treno);\n        }\n      });\n\n      _soluzioni = sol_arrivo;\n    }\n\n    if (convoglio != \"\" && _soluzioni.length > 0) {\n      let sol_convoglio = [];\n\n      _soluzioni.forEach(treno => {\n        if (treno.convoglio == convoglio) sol_convoglio.push(treno);\n      });\n\n      _soluzioni = sol_convoglio;\n    }\n\n    return _soluzioni;\n  }\n\n  static getPosFermata(treno, fermata) {\n    return treno.fermate.findFermateByName(fermata);\n  }\n\n  static getTrenoByNumber(numero) {\n    for (let i = 0; i < FRECCE.treni.length; i++) {\n      if (FRECCE.treni[i].treno === numero) return FRECCE.treni[i];\n    }\n\n    return false;\n  }\n\n}\n\nexport default Utility;","map":{"version":3,"sources":["/Users/antoninolatocca/Developer/React/react-ricerca-treni/src/Utility.js"],"names":["FRECCE","require","Array","prototype","findFermateByName","stazione","pos","forEach","fermata","position","Utility","treni","getHourDiff","pStartHour","pEndHour","res","aTmp","split","nStartMin","Number","nEndMin","nDiff","nDiffMin","nDiffHour","displayDigit","isAfter","ricerca","n","getListaStazioni","stazioni","Set","tratta","fermate","add","sort","getListaRotabili","rotabili","treno","convoglio","ricercaTreni","partenza","arrivo","orario","_soluzioni","length","push","sol_arrivo","posPartenza","posArrivo","h_feramta","h_ricerca","console","log","num1","sol_convoglio","getPosFermata","getTrenoByNumber","numero","i"],"mappings":"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","sourcesContent":["const FRECCE = require('./data.json');\n\nArray.prototype.findFermateByName = function(stazione){\n    let pos = -1;\n    this.forEach((fermata, position )=>{\n        if (fermata.stazione == stazione ){\n            pos = position;\n            return pos;\n        }\n    });\n    return pos;\n};\n\nclass Utility {\n\n    static get treni(){\n        return FRECCE;\n    }\n\n\n    static getHourDiff(pStartHour, pEndHour) {\n        let res = '';\n        let aTmp = '';\n        // Trasformo l'orario di inizio in minuti\n        aTmp = pStartHour.split(':');\n        let nStartMin = Number(aTmp[0]) * 60 + Number(aTmp[1]);\n        // Trasformo l'orario di fine in minuti\n        aTmp = pEndHour.split(':');\n        let nEndMin = Number(aTmp[0]) * 60 + Number(aTmp[1]);\n        // Calcolo la differenza\n        let nDiff = 0;\n        nDiff = (nStartMin > nEndMin) ? (nStartMin - nEndMin) : (nEndMin - nStartMin);\n        // Formatto la stringa di uscita\n        let nDiffMin = 0;\n        let nDiffHour = 0;\n        if (nDiff > 59) {\n            nDiffMin = nDiff % 60;\n            nDiffHour = (nDiff - nDiffMin) / 60;\n        } else {\n            nDiffMin = nDiff;\n        }\n        res += this.displayDigit(nDiffHour);\n        res += 'h ';\n        res += this.displayDigit(nDiffMin);\n        res += 'm';\n        return res;\n    }\n\n    static isAfter(fermata, ricerca) {\n        if(fermata[0] > ricerca[0]) return true;\n        if(fermata[0] < ricerca[0]) return false;\n        if(fermata[0] === ricerca[0]) {\n            if(fermata[1] >= ricerca[1]) return true;\n            if(fermata[1] < ricerca[1]) return false;\n        }\n    }\n\n    static displayDigit(n) {\n        return (n < 10) ? '0' + n : n;\n    }\n\n    static getListaStazioni() {\n        let stazioni = new Set();\n        FRECCE.treni.forEach(tratta => {\n            tratta.fermate.forEach(fermata => {\n                stazioni.add(fermata.stazione);\n            })\n        });\n        stazioni = [...stazioni].sort();\n        return stazioni;\n    }\n\n    static getListaRotabili() {\n        let rotabili = new Set();\n        FRECCE.treni.forEach(treno => {\n            rotabili.add(treno.convoglio);\n        });\n        rotabili = [...rotabili].sort();\n        return rotabili;\n    }\n\n    static ricercaTreni(partenza, arrivo, orario, convoglio) {\n        let _soluzioni = [];\n        FRECCE.treni.forEach(treno => {\n            treno.fermate.forEach(fermata => {\n                if (fermata.stazione == partenza && fermata != treno.fermate[treno.fermate.length - 1]) {\n                    _soluzioni.push(treno);\n                }\n            });\n        });\n        if (arrivo != \"\" && _soluzioni.length > 0){\n            let sol_arrivo = [];\n            _soluzioni.forEach((treno)=> {\n                const posPartenza = treno.fermate.findFermateByName(partenza);\n                const posArrivo  = treno.fermate.findFermateByName(arrivo);\n                const h_feramta = treno.fermate[posPartenza].orario.split(':');\n                let h_ricerca;\n                console.log(typeof orario);\n                if(typeof num1 != 'number') {\n                    h_ricerca = orario.split(\":\");\n                } else {\n                    h_ricerca[0] = orario;\n                    h_ricerca[1] = \"00\";\n                }\n                if (posPartenza < posArrivo && this.isAfter(h_feramta, h_ricerca)){\n                    sol_arrivo.push(treno);\n                }\n            });\n            _soluzioni = sol_arrivo;\n        }\n        if(convoglio != \"\" && _soluzioni.length > 0){\n            let sol_convoglio = [];\n            _soluzioni.forEach(treno => {\n                if(treno.convoglio == convoglio) sol_convoglio.push(treno);\n            })\n            _soluzioni = sol_convoglio;\n        }\n        return _soluzioni;\n    }\n\n    static getPosFermata(treno, fermata) {\n        return treno.fermate.findFermateByName(fermata);\n    }\n\n    static getTrenoByNumber(numero) {\n        for (let i = 0; i < FRECCE.treni.length; i++) {\n            if(FRECCE.treni[i].treno === numero) return FRECCE.treni[i];\n        }\n        return false;\n    }\n\n}\n\nexport default Utility;"]},"metadata":{},"sourceType":"module"}